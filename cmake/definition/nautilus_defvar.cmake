include_guard()

include(nautilus_option)

set(NAUTILUS_COMPILE_DEFINITIONS_COMMON)
set(NAUTILUS_COMPILE_DEFINITIONS_DEVELOP)
set(NAUTILUS_COMPILE_DEFINITIONS_RELEASE)
set(NAUTILUS_COMPILE_OPTIONS_COMMON)
set(NAUTILUS_COMPILE_OPTIONS_DEVELOP)
set(NAUTILUS_COMPILE_OPTIONS_RELEASE)
set(NAUTILUS_LINK_OPTIONS_COMMON)
set(NAUTILUS_LINK_OPTIONS_DEVELOP)
set(NAUTILUS_LINK_OPTIONS_RELEASE)

if(NAUTILUS_WARNINGS_AS_ERRORS)
  set(NAUTILUS_MESSAGE_WARNING FATAL_ERROR)
else()
  set(NAUTILUS_MESSAGE_WARNING WARNING)
endif()

# compiler

if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  set(NAUTILUS_COMPILER_IS_GCC ON)
elseif(CMAKE_C_COMPILER_ID MATCHES ".*Clang" OR
    CMAKE_CXX_COMPILER_ID MATCHES ".*Clang")
  set(NAUTILUS_COMPILER_IS_CLANG ON)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  set(NAUTILUS_COMPILER_IS_MSVC ON)
endif()

# system
## Please use $<PLATFORM_ID:NAME>.
## see more: https://cmake.org/cmake/help/latest/variable/CMAKE_SYSTEM_NAME.html#variable:CMAKE_SYSTEM_NAME

# IHV
# learn more about platform at https://github.com/Kitware/CMake/blob/master/Modules/CMakePlatformId.h.in

if(CMAKE_SYSTEM_PROCESSOR STREQUAL "")
  set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_HOST_SYSTEM_PROCESSOR})
endif()
string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" NAUTILUS_ARCH_ID)

if(NAUTILUS_ARCH_ID MATCHES "arm" OR NAUTILUS_ARCH_ID MATCHES "^aarch.*")
  set(NAUTILUS_ARCH_IS_ARM ON)
elseif(NAUTILUS_ARCH_ID MATCHES "^ppc.*" OR NAUTILUS_ARCH_ID MATCHES "^powerpc.*")
  set(NAUTILUS_ARCH_IS_POWERPC ON)
elseif(NAUTILUS_ARCH_ID MATCHES "^riscv.*")
  set(NAUTILUS_ARCH_IS_RISCV ON)
elseif(NAUTILUS_ARCH_ID MATCHES "^loongarch.*")
  set(NAUTILUS_ARCH_IS_LOONG ON)
elseif(NAUTILUS_ARCH_ID MATCHES "x86.*" OR NAUTILUS_ARCH_ID MATCHES "^i.*86")
  set(NAUTILUS_ARCH_IS_X86 ON)
elseif(NAUTILUS_ARCH_ID STREQUAL "amd64")
  set(NAUTILUS_ARCH_IS_X86 ON)
elseif(NAUTILUS_ARCH_ID MATCHES "^sparc.*" OR NAUTILUS_ARCH_ID STREQUAL "s390x")
  set(NAUTILUS_ARCH_IS_SPARC ON)
else()
  message(FATAL_ERROR "Not support the architecture platform: ${NAUTILUS_ARCH_ID}.")
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set(NAUTILUS_ARCH_IS_64BIT ON)
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
  set(NAUTILUS_ARCH_IS_32BIT ON)
else()
  message(FATAL_ERROR "Not support the architecture.")
endif()

if(CMAKE_VERSION VERSION_LESS 3.20)
  include(TestBigEndian)
  test_big_endian(NAUTILUS_IS_BIG_ENDIAN)
else()
  get_property(NAUTILUS_LANGUAGES GLOBAL PROPERTY ENABLED_LANGUAGES)
  foreach(lang IN LISTS NAUTILUS_LANGUAGES)
    if(NOT ${CMAKE_${lang}_BYTE_ORDER} STREQUAL "")
      set(NAUTILUS_ARCH_ENDIANNESS ${CMAKE_${lang}_BYTE_ORDER})
      break()
    endif()
  endforeach()
  if(NAUTILUS_ARCH_ENDIANNESS STREQUAL "BIG_ENDIAN")
    set(NAUTILUS_IS_BIG_ENDIAN ON)
  else()
    set(NAUTILUS_IS_BIG_ENDIAN OFF)
  endif()
  unset(NAUTILUS_ARCH_ENDIANNESS)
  unset(NAUTILUS_LANGUAGES)
endif()
